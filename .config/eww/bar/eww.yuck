(defwidget bar_mod []
    (box
        :class "bar_mod"
        :orientation "h"
        (content 
            :side "start")

        (content :side "center"
                 (workspaces))
        (content :side "end"
                 (sound)
                 (label :text "/" :class "sep")
                 (overlay
                     :tooltip "Cpu: ${round(EWW_CPU.avg, 1)}%, Ram: ${round(EWW_RAM.used_mem_perc, 1)}%"
                     (ram)
                     (cpu))
                 (label :text "/" :class "sep")
                 (time))))

(defwindow bar
    :monitor '["DP-4", "eDP-1"]'
    :geometry (geometry
                  :x "0"
                  :width "100%"
                  :height "37px"
                  :anchor "top center")
    :stacking "fg"
    :exclusive true
    :focusable false

    (bar_mod))

;; Clock
(defvar time_reveal false)
(defvar bright_reveal false)
(deflisten bright_perc :initial "100" "./bar/scripts/brightness.sh")
(defvar sound_reveal false)
(deflisten sound_perc :initial "100" "./bar/scripts/volume.sh")

(deflisten workspaces 
    :initial '[{"id":"1","windows":1}]'
    `./bar/scripts/workspaces.sh all`)

(deflisten active_workspace
    :initial "1"
    `./bar/scripts/workspaces.sh active`)


(defwidget bbox [orientation]
    (centerbox
        :orientation orientation
        (box)
        (box (children))
        (box)))

(defwidget cbox []
    (centerbox
        :orientation "h"
        (box)
        (centerbox
            :orientation "v"
            (box)
            (box (children))
            (box))
        (box)))

(defwidget circle [?color value ?reverse]
    (overlay
        (circular-progress 
            :style {color != "" ? "color: ${color}" : ""}
            :width 20
            :clockwise {reverse != "" ? false : true}
            :thickness 3
            :value value
            (cbox (box :class "dot" :style {color != "" ? "background-color: ${color}" : ""})))))


(defwidget slider [reveal percentage reveal_name command icon color tooltip]
    (eventbox
        :onhover "${EWW_CMD} update ${reveal_name}=true"
        :onhoverlost "${EWW_CMD} update ${reveal_name}=false"
        (box
            :space-evenly false
            (revealer
                :reveal "${reveal}"
                :transition "slideright"
                :duration 200
                (scale
                    :css "trough highlight {background-color: ${color}; border-radius: 26px;}"
                    :flipped true
                    :min {matches(reveal_name, "bright") ? 1 : 0}
                    :max 101
                    :width 125
                    :onchange command
                    :value percentage))
            (overlay
                :tooltip {replace(tooltip, 'VAL', percentage)}
                (bbox :orientation "v"
                      (scale
                          :orientation "vertical"
                          :height 25
                          :flipped true
                          :class "overlay-scale"
                          :value percentage))

                (label 
                    :text icon 
                    :style "color: ${color}; font-size: 12px;"
                    :class "icon")))))

(defwidget content [side]
    (box
        :class "${side}_mod"
        :space-evenly false
        :halign side
        :orientation "h"
        :spacing 10
        (children)))

(defwidget time []
    (eventbox
        :onhover "${EWW_CMD} update time_reveal=true"
        :onhoverlost "${EWW_CMD} update time_reveal=false"
        (box
            :space-evenly false
            :class "clock"
            (box
                :halign "center"
                :class "time"
                :space-evenly false
                (label :text "${formattime(EWW_TIME, '%I:%M')}"))
            (box
               :spacing 5
               :class "date"
               :space-evenly false
               (label) ;; to align things properly
               (label :text "-")
               (label :text "${formattime(EWW_TIME, '%b %e')}")))))

(defwidget battery []
    (box
        :tooltip "Battery: ${EWW_BATTERY["BAT1"]["capacity"]}%"
        :class "battery ${EWW_BATTERY["BAT1"]["status"]}"
        (circle
            :color {EWW_BATTERY["BAT1"]["status"] == "Discharging" ? "mix(#a6da95, #940000, ${EWW_BATTERY["BAT1"]["capacity"]})" : ""}
            :value {EWW_BATTERY["BAT1"]["capacity"]})))

(defwidget cpu []
    (circle
        :color "#91d7e3"
        :value {EWW_CPU.avg}))

(defwidget ram []
    (circle
        :color "#c6a0f6"
        :reverse true
        :value {EWW_RAM.used_mem_perc}))

(defwidget workspaces []
    (box
        :halign "baseline"
        :spacing 6
        :space-evenly false
        (for workspace in workspaces
             (bbox :orientation "v"
                   (button 
                       :class "workspace${workspace.id == active_workspace ? " current" : ""}${workspace.windows == 0 ? " empty" : ""}"
                       :onclick "hyprctl dispatch workspace ${workspace.id}")))))

(defwidget brightness []
    (slider
        :reveal bright_reveal
        :reveal_name "bright_reveal"
        :percentage bright_perc

        :command "brightnessctl set {}%"

        :icon ""
        :color "#eed49f"
        :tooltip "Brightness: VAL%"))

(defwidget sound []
    (slider
        :reveal sound_reveal
        :reveal_name "sound_reveal"
        :percentage sound_perc

        :command "pactl set-sink-volume @DEFAULT_SINK@ {}%"

        :icon ""
        :color "#8bd5ca"
        :tooltip "Sound: VAL%"))

